Axioms:
sub_bytes_equiv
  : forall st : t bool 128,
    from_cols_bitvecs (combinational (sub_bytes false (to_cols_bitvecs st))) =
    AES256.sub_bytes st
sub_bytes
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4))
shift_rows_equiv
  : forall st : t bool 128,
    from_cols_bitvecs (combinational (shift_rows false (to_cols_bitvecs st))) =
    AES256.shift_rows st
shift_rows
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4))
mix_columns_equiv
  : forall st : t bool 128,
    from_cols_bitvecs
      (combinational (mix_columns false (to_cols_bitvecs st))) =
    AES256.mix_columns st
mix_columns
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4))
key_expand_spec : nat -> t bool 128 * t bool 8 -> t bool 128 * t bool 8
key_expand_equiv
  : forall (i : nat) (k : t (t (t bool 8) 4) 4 * t bool 8),
    i < 16 ->
    combinational (key_expand false (nat_to_bitvec_sized 4 i) k) =
    unflatten_key (key_expand_spec i (flatten_key k))
key_expand
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec Bit 4) ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) * signal (Vec Bit 8) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4) * signal (Vec Bit 8))
inv_sub_bytes_equiv
  : forall st : t bool 128,
    from_cols_bitvecs (combinational (sub_bytes true (to_cols_bitvecs st))) =
    inv_sub_bytes st
inv_shift_rows_equiv
  : forall st : t bool 128,
    from_cols_bitvecs (combinational (shift_rows true (to_cols_bitvecs st))) =
    inv_shift_rows st
inv_mix_columns_equiv
  : forall st : t bool 128,
    from_cols_bitvecs (combinational (mix_columns true (to_cols_bitvecs st))) =
    inv_mix_columns st
inv_key_expand_spec : nat -> t bool 128 * t bool 8 -> t bool 128 * t bool 8
inv_key_expand_equiv
  : forall (i : nat) (k : t (t (t bool 8) 4) 4 * t bool 8),
    i < 16 ->
    combinational (key_expand true (nat_to_bitvec_sized 4 i) k) =
    unflatten_key (inv_key_expand_spec i (flatten_key k))
